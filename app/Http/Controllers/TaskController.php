<?php

namespace App\Http\Controllers;

use App\Models\Task;
use App\Models\Team;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Services\TelegramService;

class TaskController extends Controller
{
    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
    public function index(Request $request)
{
    // –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥, –∫ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    $userTeams = Auth::user()->teams->pluck('id');

    // –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–æ–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–¥–∞—á
    $query = Task::with('team'); // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏ (–ª–∏—á–Ω—ã–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–Ω—ã–µ)
    if ($request->has('task_type') && $request->task_type != '') {
        if ($request->task_type == 'team') {
            // –ó–∞–¥–∞—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
            $query->whereIn('team_id', $userTeams); // –ó–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö –∫–æ–º–∞–Ω–¥, –∫ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        } elseif ($request->task_type == 'personal') {
            // –õ–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $query->where('user_id', Auth::id()) // –ó–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                  ->whereNull('team_id'); // –ó–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–º–∞–Ω–¥–µ
        }
    } else {
        // –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω —Ñ–∏–ª—å—Ç—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∏ –¥–ª—è –∫–æ–º–∞–Ω–¥
        $query->where('user_id', Auth::id()) // –õ–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
              ->orWhereIn('team_id', $userTeams); // –ó–∞–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–µ–¥–ª–∞–π–Ω—É (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ä–æ–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    if ($request->has('deadline_sort') && $request->deadline_sort != '') {
        if ($request->deadline_sort == 'soonest') {
            $query->orderBy('deadline', 'asc'); // –ë–ª–∏–∂–∞–π—à–∏–π –¥–µ–¥–ª–∞–π–Ω
        } elseif ($request->deadline_sort == 'latest') {
            $query->orderBy('deadline', 'desc'); // –°–∞–º—ã–π –¥–∞–ª—å–Ω–∏–π –¥–µ–¥–ª–∞–π–Ω
        }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    $tasks = $query->get();
    
    return view('tasks.index', compact('tasks'));
    }


    protected $telegramService;

    public function __construct(TelegramService $telegramService)
    {
        $this->telegramService = $telegramService;
    }

    public function store(Request $request)
{
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    $request->validate([
        'title' => 'required|string|max:255',
        'description' => 'required|string',
        'deadline' => 'required|date',
        'team_id' => 'nullable|exists:teams,id',
    ]);

    


    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    $task = Task::create([
        'title' => $request->input('title'),
        'description' => $request->input('description'),
        'deadline' => $request->input('deadline'),
        'team_id' => $request->input('team_id'),
        
        'user_id' => Auth::id(),
    ]);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    $message = "üìå *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!* \n\n" .
               "üìÇ *–ù–∞–∑–≤–∞–Ω–∏–µ*: {$task->title} \n" .
               "üè¢ *–ö–æ–º–∞–Ω–¥–∞*: " . ($task->team ? $task->team->name : '–ë–µ–∑ –∫–æ–º–∞–Ω–¥—ã') . " \n" .
               "‚è≥ *–î–µ–¥–ª–∞–π–Ω*: " . \Carbon\Carbon::parse($task->deadline)->format('d.m.Y H:i') . " \n" .
               "üìù *–û–ø–∏—Å–∞–Ω–∏–µ*: {$task->description} \n" ;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ TelegramService
    $this->telegramService->sendMessage($message);

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± —É—Å–ø–µ—Ö–µ
    return redirect()->route('tasks.index')->with('success', '–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
}

    


    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    public function create()
    {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $teams = Team::where('owner_id', Auth::id())->get();
        

    
        // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        return view('tasks.create', compact('teams'));
    }
    



    
    

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É
    public function edit(Task $task)
    {
        if ($task->user_id !== Auth::id()) {
            return redirect()->route('tasks.index')->with('error', '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.');
        }

        $teams = Team::where('owner_id', Auth::id())->get(); // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return view('tasks.edit', compact('task', 'teams'));
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
    public function update(Request $request, Task $task)
    {
        $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'required|string',
            'deadline' => 'required|date',
            'team_id' => 'nullable|exists:teams,id',
        ]);

        $task->update([
            'title' => $request->title,
            'description' => $request->description,
            'deadline' => $request->deadline,
            'team_id' => $request->team_id,
        ]);

        return redirect()->route('tasks.index')->with('success', '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    }

    // –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
    public function destroy(Task $task)
    {
        if ($task->user_id !== Auth::id()) {
            return redirect()->route('tasks.index')->with('error', '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.');
        }

        $task->delete();
        return redirect()->route('tasks.index')->with('success', '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!');
    }
    

   

    

    
    
}


